////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "PCH.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "SceneObject.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include "Scene.h"
#include "ScriptWriter.h"
#include "..\Renderer\Renderer.h"
#include "..\Renderer\DrawPackage.h"

namespace FE {

	namespace SCENE {

		//==============================================================
		//==============================================================

		CSceneObject::CSceneObject(Scene scene) 
			: m_Scene(scene) {
		}

		//==============================================================
		//==============================================================

		void CSceneObject::create(const SCENE_OBJECT_CREATE_INFO *createInfo) {

			// ~~~~~~~~~~~~~~~~
			// создаём DrawPackage
			// ~~~~~~~~~~~~~~~~

			// описываем
			RENDERER::DRAW_PACKAGE_CREATE_INFO _drawPackageCI = {};

			// создаём
			RENDERER::CRenderer::create(m_Scene->getScriptWriter()->getRenderer(), &m_DrawPackage, &_drawPackageCI);

		}

		//==============================================================
		//==============================================================
		
		void CSceneObject::setMesh(const RENDERER::Mesh mesh) {

			m_DrawPackage->set(mesh);
	
		}

		//==============================================================
		//==============================================================

		void CSceneObject::setEffect(const RENDERER::Effect Effect) {

			m_DrawPackage->set(Effect);

		}

		//==============================================================
		//==============================================================

		const RENDERER::DrawPackage CSceneObject::getDrawPackage(void) const {

			return m_DrawPackage;
		}

		//==============================================================
		//==============================================================

	} // namespace SCENE

} // namespace FE