#ifndef MESH__H
#define MESH__H
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция родительского класса
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
#include "pch.renderer.h"
#include "../Common/FCommon.h"
#include "../CommonRenderInterface/CommonRenderInterface.h"
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include "../Common/Format.h"

namespace FE {

	namespace RENDERER {

		enum MESH_VERTEX_SEMANTIC {

			POSITION		= 0x0000001,
			COLOR			= 0x0000002,
			NORMAL			= 0x0000004,
			UV				= 0x0000008
		};

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		struct MESH_ATTRIBUTE_BINDING {

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			/*!	\brief Имя атрибута
			*/
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			enum class NAME {
				POSITION,
				COLOR,
				NORMAL
			};

			NAME						m_Name;
			COMMON::FORMAT::DATA		m_Format;
			uint32_t					m_Capacity;

		};
		using MESH_ATTRIBUTE_LAYOUT = std::vector<MESH_ATTRIBUTE_BINDING>;
		using MESH_ATTRIBUTE_DECLARATION = std::vector<MESH_ATTRIBUTE_LAYOUT>;



		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		/*!	\brief Информация для создания меша.
		*/
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		struct MESH_CREATE_INFO {

			MESH_ATTRIBUTE_DECLARATION		m_AttributeDeclaration;

		}; // struct MESH_CREATE_INFO



		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		/*!	\brief
		*/
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		class CMesh {

		public:

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//!	\brief Конструктор.

			// \param[in] renderer Владеет объектом.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			CMesh(Renderer renderer);

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			/*!	\brief Создать объект.

			\param[in] createInfo Информация для создания.
			*/
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			void create(const MESH_CREATE_INFO *createInfo);

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//!	\brief Добавить массив данных с вершинами.

			// \arrayVertices[in] Массив данных с вершинами.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			void addVertices(COMMON::Blob blobVertices);

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//!	\brief Добавить массив данных с индексами.

			// \param[in] blobIndices Массив данных с индексами.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			void addIndices(COMMON::Blob blobIndices);

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//!	\brief Получить макет атрибутов.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			const MESH_ATTRIBUTE_DECLARATION& getAttributeDeclaration(void) const;

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//!	\brief Получить буфер с вертексами.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			const CRI::CRIDataBufferArr getVertices(void) const;

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//!	\brief Получить буфер с индексами.
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			const CRI::CRIDataBuffer getIndices(void) const;

		// данные
		private:

			Renderer					m_Renderer;				///< Рендерер, который создал объект.
			MESH_CREATE_INFO			m_CreateInfo;			///< Информация, по которой был создан объект.
			CRI::CRIDataBufferArr		m_Vertices;
			CRI::CRIDataBuffer			m_Indices;

		}; // class CMesh

	} // namespace RENDERER

} // namespace FE

#endif // MESH__H