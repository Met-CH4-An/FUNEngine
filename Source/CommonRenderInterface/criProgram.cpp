////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "CommonRenderInterface.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "CRIProgram.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include "Vulkan/vknContext.h"
#include "Private/Vulkan/vknBatch.h"
#include "Vulkan/vknProgram.h"

namespace FE {

	namespace CRI {

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		/*CRIProgram CCRIProgram::create(const CRI_PROGRAM_CREATE_INFO *criCreateInfo) {

			ASSERT_EX(criCreateInfo->isValid(), == , true, "Invalid CRI_PROGRAM_CREATE_INFO.", throw e_cri_program_create_failed());

			// ~~~~~~~~~~~~~~~~
			// VKContext
			// ~~~~~~~~~~~~~~~~

			auto _vknContext = VULKAN::cri2vkn_Context(criCreateInfo->m_criContext);

			// ~~~~~~~~~~~~~~~~
			// VKProgram
			// ~~~~~~~~~~~~~~~~

			auto _vknProgram = _vknContext->getBatch()->getProgram(criCreateInfo);

			// ~~~~~~~~~~~~~~~~
			// new CRIRenderPassPrivate
			// ~~~~~~~~~~~~~~~~

			auto _criProgramPrivate = std::make_shared<CCRIProgramPrivate>(_vknProgram);

			// ~~~~~~~~~~~~~~~~
			// ~~~~~~~~~~~~~~~~

			return _criProgramPrivate;

		}*/

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		CCRIProgram::CCRIProgram(void) {
		}

		//==============================================================
		//==============================================================

		CCRIProgram::~CCRIProgram() {
		}

		//==============================================================
		//==============================================================

	} // namespace CRI

} // namespace FE