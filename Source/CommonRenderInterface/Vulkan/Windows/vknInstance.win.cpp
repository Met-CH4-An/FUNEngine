////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "CommonRenderInterface.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "../vknInstance.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include <Windows.h>

namespace FE {

	namespace CRI {

		namespace VULKAN {

			//==============================================================
			//==============================================================

			void CVKInstance::createPlatform(void) {

				// загружаем dll вулкана
				HMODULE _handleDll = LoadLibrary("vulkan-1.dll");

				ASSERT_EX(_handleDll, != , NULL, "Не удалось загрузить vulkan-1.dll.", throw e_vulkan_common_instance_create_fail());

				// получаем адресс функции, через которую можно будет получить адреса остальных функций вулкана
				vkGetInstanceProcAddr = reinterpret_cast<PFN_vkGetInstanceProcAddr>(GetProcAddress(_handleDll, "vkGetInstanceProcAddr"));

			}

			//==============================================================
			//==============================================================

		} // namespace VULKAN

	} // namespace RENDER

} // namespace FE