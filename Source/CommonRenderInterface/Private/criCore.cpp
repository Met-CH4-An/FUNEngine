////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "CommonRenderInterface.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "CRICore.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include "../CRIContext.h"

namespace FE {

	namespace CRI {

		//==============================================================
		//==============================================================

		void CCRICore::create(const CRI_CORE_CREATE_INFO *createInfo) {

			m_CreateInfo = *createInfo;

		}

		//==============================================================
		//==============================================================
		
		void CCRICore::getContext(CRIContext *context, const CRI_CONTEXT_CREATE_INFO *createInfo) {

			// новый контекст
			//CRIContext _newContext = new CCRIContext();

			// создаём
			//_newContext->create(createInfo);

			// в массив контекстов
			//md_Contexts.push_back(_newContext);

			//(*context) = _newContext;

		}

		//==============================================================
		//==============================================================

	} // namespace RENDER

} // namespace FE