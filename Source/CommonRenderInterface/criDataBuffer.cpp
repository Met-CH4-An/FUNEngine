////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "CommonRenderInterface.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "CRIDataBuffer.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include "CRIContext.h"
#include "../Common/Blob.h"
#include "Vulkan/vknContext.h"
#include "Vulkan/vknDataBuffer.h"

namespace FE {

	namespace CRI {

		//==============================================================
		//==============================================================

		CCRIDataBuffer::CCRIDataBuffer(CRIContext criContext)
			: m_Context(criContext),
			m_CreateInfo(),
			m_Valid(false)
			//m_Data(nullptr),
			//m_Size(0) {
		{
		}

		//==============================================================
		//==============================================================

		void CCRIDataBuffer::create(const CRI_DATA_BUFFER_CREATE_INFO *createInfo) {
			
			if (createInfo == nullptr) return;

			m_CreateInfo = *createInfo;

			static_cast<VULKAN::CVKDataBuffer*>(this)->create(createInfo);
			
			// если есть данные для инициализации
			if (m_CreateInfo.m_Update.m_Data != nullptr) {

				update(&m_CreateInfo.m_Update);
			}

			m_Valid = true;
			
		}

		//==============================================================
		//==============================================================

		void CCRIDataBuffer::update(const CRI_DATA_BUFFER_UPDATE_INFO *updateInfo) {

			m_UpdateInfo.push_back(*updateInfo);

			static_cast<VULKAN::CVKDataBuffer*>(this)->update();
		}

		//==============================================================
		//==============================================================

	} // namespace RENDER

} // namespace FE