////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "PCH.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "Particles.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////
#include "..\Renderer\Renderer.h"
#include "..\CommonRenderInterface\criContext.h"
#include "..\CommonRenderInterface\criDataBuffer.h"

namespace FE {

	namespace PARTICLES {

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		CParticles::CParticles(RENDERER::Renderer renderer)
			: m_Renderer(renderer) {

		}

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		void CParticles::create(const PARTICLES_CREATE_INFO *createInfo) {

			// получаем
			//CRI::CRIDataBuffer _storageBuffer;
			//CRI::CCRIContext::get(m_Renderer->getContext(), &_storageBuffer);

			// описываем
			//CRI::CRI_DATA_BUFFER_CREATE_INFO _storageBufferCI = {};
			
			//_storageBufferCI.m_Usage = CRI::CRI_DATA_BUFFER_CREATE_INFO::USAGE::STORAGE;

			// создаём
			//_storageBuffer->create();
		}

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	} // namespace PARTICLES

} // namespace FE