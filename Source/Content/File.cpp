////////////////////////////////////////////////////////////////
// секция PCH
////////////////////////////////////////////////////////////////
#include "PCH.h"
////////////////////////////////////////////////////////////////
// секция заголовочного файла
////////////////////////////////////////////////////////////////
#include "File.h"
////////////////////////////////////////////////////////////////
// секция компиляция файла
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция форвард-декларации
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для исключений
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// секция для остального
////////////////////////////////////////////////////////////////

namespace FE {

	namespace CONTENT {

		//==============================================================
		//==============================================================

		CFile::CFile(void) {

			//m_Valid = false;
			m_FileStream;

		}

		//==============================================================
		//==============================================================

		void CFile::create(const FILE_CREATE_INFO *createInfo) {
			
			m_CreateInfo = *createInfo;

			// ~~~~~~~~~~~~~~~~
			// открываем
			// ~~~~~~~~~~~~~~~~
			
			m_FileStream.open(createInfo->m_Name, std::ios::binary);

			ASSERT_EX(m_FileStream.is_open(), ==, true, 
				"Не удалось открыть std::ifstream.",
				throw e_content_file_create_fail());
			
			// ~~~~~~~~~~~~~~~~
			// размер
			// ~~~~~~~~~~~~~~~~
			
			m_FileStream.seekg(0, std::ios::end);
			size_t _size = m_FileStream.tellg();
			m_FileStream.seekg(0, std::ios::beg);

			// выделяем
			m_Data.resize(_size, ' ');

			// ~~~~~~~~~~~~~~~~
			// читаем 
			// ~~~~~~~~~~~~~~~~

			m_FileStream.read(&m_Data[0], _size);

			//m_Valid = true;
		
		}

		//==============================================================
		//==============================================================

	} // namespace CONTENT

} // namespace FE